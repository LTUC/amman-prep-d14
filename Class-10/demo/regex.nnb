{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "##### Regular expressions are patterns used to match character combinations in strings. \n* We use to validate strings against certain rules.\n* Find substring within a string\n* Replace part of the string\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "1- Test method"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "let string = \"Java is 2 JavaScript what Car is to Carpet\";\n\nlet regex = /javascript/\n// testing if string has the regex \n regex.test(string)\n// Case insensitive\nlet regex2 = /javascript/i\n\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// Checking the number d: digit\nlet regex3 = /\\d/\nregex3.test(string)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33mtrue\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "// Check number between 0-5\nlet regex4 = /[0-9]/\nregex4.test(string)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33mtrue\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "// Check letter\n\nlet regex5 = /\\w/\nregex5.test(string)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33mtrue\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "// Check special letter\nlet regex6 = /\\W/\nregex6.test(string)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33mtrue\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "// Check if string contains capital letter\nlet regex7 = /[A-Z]/\nregex7.test(string)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33mtrue\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "// Check if the string start with Java\n// and end with it\nlet regex8 = /^Java/\nregex8.test(string)\n\nlet regex9 = /Java$/\nregex9.test(string)\n\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33mfalse\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "2- match method"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// How many times that has Java g:global\nlet regex10 = /Java/g\nstring.match(regex10)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'Java'\u001b[39m,",
                                "  \u001b[32m'Java'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "// search about spaces b: boundry\nlet regex11 = /\\b/g\nstring.match(regex11).length\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m18\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "3- replace method"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// Replace spaces with -\nlet regex12 = /\\b/g\nstring.replace(regex12, '-')\n\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[32m'-Java- -is- -2- -JavaScript- -what- -Car- -is- -to- -Carpet-'\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}